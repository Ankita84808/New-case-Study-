import sqlite3
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import csv

class CompensationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Compensation Forecast Tool")

        self.conn = sqlite3.connect("employees.db")

        self.role_var = tk.StringVar()
        self.loc_var = tk.StringVar()
        self.raise_var = tk.DoubleVar(value=10.0)

        self.setup_ui()
        self.load_dropdowns()

    def setup_ui(self):
        # Filters
        filter_frame = ttk.LabelFrame(self.root, text="Filters")
        filter_frame.pack(padx=10, pady=10, fill="x")

        ttk.Label(filter_frame, text="Role").grid(row=0, column=0, padx=5, pady=5)
        self.role_cb = ttk.Combobox(filter_frame, textvariable=self.role_var)
        self.role_cb.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(filter_frame, text="Location").grid(row=0, column=2, padx=5, pady=5)
        self.loc_cb = ttk.Combobox(filter_frame, textvariable=self.loc_var)
        self.loc_cb.grid(row=0, column=3, padx=5, pady=5)

        ttk.Button(filter_frame, text="Filter", command=self.filter_employees).grid(row=0, column=4, padx=5)

        # Forecast
        forecast_frame = ttk.LabelFrame(self.root, text="Forecast")
        forecast_frame.pack(padx=10, pady=5, fill="x")

        ttk.Label(forecast_frame, text="Raise (%)").grid(row=0, column=0, padx=5, pady=5)
        self.raise_entry = ttk.Entry(forecast_frame, textvariable=self.raise_var, width=10)
        self.raise_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Button(forecast_frame, text="Forecast Compensation", command=self.forecast_compensation).grid(row=0, column=2, padx=5)

        # Table
        self.tree = ttk.Treeview(self.root, columns=("name", "role", "location", "compensation"), show="headings")
        self.tree.pack(padx=10, pady=10, fill="both", expand=True)
        for col in self.tree["columns"]:
            self.tree.heading(col, text=col.capitalize())

        # Export
        ttk.Button(self.root, text="Export to CSV", command=self.export_csv).pack(pady=5)

    def load_dropdowns(self):
        cursor = self.conn.cursor()

        cursor.execute("SELECT DISTINCT role FROM employees")
        roles = [row[0] for row in cursor.fetchall()]
        self.role_cb["values"] = roles

        cursor.execute("SELECT DISTINCT location FROM employees")
        locations = [row[0] for row in cursor.fetchall()]
        self.loc_cb["values"] = locations

    def filter_employees(self):
        self.tree.delete(*self.tree.get_children())
        cursor = self.conn.cursor()

        query = """
            SELECT name, role, location, current_compensation
            FROM employees
            WHERE is_active = 1
              AND (? IS NULL OR role = ?)
              AND (? IS NULL OR location = ?)
        """

        role = self.role_var.get() or None
        loc = self.loc_var.get() or None
        cursor.execute(query, (role, role, loc, loc))
        for row in cursor.fetchall():
            self.tree.insert("", "end", values=row)

    def forecast_compensation(self):
        self.tree.delete(*self.tree.get_children())
        cursor = self.conn.cursor()
        raise_percent = self.raise_var.get()

        query = """
            SELECT name, role, current_compensation,
                   ROUND(current_compensation * (1 + ? / 100.0), 2) AS forecasted_comp
            FROM employees
            WHERE is_active = 1
        """

        cursor.execute(query, (raise_percent,))
        for row in cursor.fetchall():
            self.tree.insert("", "end", values=(row[0], row[1], "", f"{row[2]} â†’ {row[3]}"))

    def export_csv(self):
        if not self.tree.get_children():
            messagebox.showinfo("No Data", "Nothing to export.")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".csv",
                                                 filetypes=[("CSV files", "*.csv")])
        if file_path:
            with open(file_path, "w", newline="") as f:
                writer = csv.writer(f)
                writer.writerow([col.capitalize() for col in self.tree["columns"]])
                for row_id in self.tree.get_children():
                    writer.writerow(self.tree.item(row_id)["values"])
            messagebox.showinfo("Export Successful", f"Data exported to {file_path}")


if __name__ == "__main__":
    root = tk.Tk()
    app = CompensationApp(root)
    root.mainloop()
